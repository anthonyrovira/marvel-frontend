[{"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Characters.js":"1","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\Header.js":"2","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\App.js":"3","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Comics.js":"4","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\CardCharacters.js":"5","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\CardComics.js":"6","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Character.js":"7","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\AuthModal.js":"8","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Favorites.js":"9","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\index.js":"10","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\Footer.js":"11","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\Page404.js":"12"},{"size":4070,"mtime":1612726067260,"results":"13","hashOfConfig":"14"},{"size":2788,"mtime":1612715248184,"results":"15","hashOfConfig":"14"},{"size":2998,"mtime":1612722550778,"results":"16","hashOfConfig":"14"},{"size":4069,"mtime":1612726002683,"results":"17","hashOfConfig":"14"},{"size":3149,"mtime":1612738589184,"results":"18","hashOfConfig":"14"},{"size":2755,"mtime":1612736792638,"results":"19","hashOfConfig":"14"},{"size":5859,"mtime":1612725991849,"results":"20","hashOfConfig":"14"},{"size":4713,"mtime":1612725588367,"results":"21","hashOfConfig":"14"},{"size":3209,"mtime":1612738789594,"results":"22","hashOfConfig":"14"},{"size":259,"mtime":1612376524252,"results":"23","hashOfConfig":"14"},{"size":586,"mtime":1612378241633,"results":"24","hashOfConfig":"14"},{"size":347,"mtime":1612386122542,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"13jjkbq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Characters.js",["54"],"import React, { useState, useEffect } from \"react\";\r\nimport CardCharacters from \"../components/CardCharacters\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from \"axios\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport qs from \"qs\";\r\n\r\nconst Characters = (props) => {\r\n  const { search, skip, handleSkip, authToken } = props;\r\n  const [data, setData] = useState([]);\r\n  const [count, setCount] = useState(1);\r\n  const [limit, setLimit] = useState(100);\r\n  const [debouncedSearch] = useDebounce(search, 800);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [totalCharacters, setTotalCharacters] = useState(0);\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let params = {};\r\n        if (debouncedSearch) {\r\n          params = {\r\n            apiKey: process.env.REACT_APP_MARVEL_API_PUBLIC_KEY,\r\n            name: debouncedSearch,\r\n          };\r\n        } else {\r\n          params = {\r\n            apiKey: process.env.REACT_APP_MARVEL_API_PUBLIC_KEY,\r\n            limit: limit,\r\n            skip: skip,\r\n          };\r\n        }\r\n\r\n        const queryParams = qs.stringify(params);\r\n\r\n        const response = await axios.get(\r\n          `https://lereacteur-marvel-api.herokuapp.com/characters?${queryParams}`\r\n        );\r\n        setData(response.data.results);\r\n        setLimit(response.data.limit);\r\n        setTotalCharacters(response.data.count);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [debouncedSearch, limit, skip]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const newCount = Math.ceil(totalCharacters / limit);\r\n      setCount(newCount);\r\n    };\r\n\r\n    fetchData();\r\n  }, [data, limit, count, totalCharacters, isLoading]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (authToken) {\r\n        const response = await axios.get(\r\n          \"https://marvel-hysteria9.herokuapp.com/favorites\",\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + authToken,\r\n            },\r\n          }\r\n        );\r\n        if (response.data) {\r\n          const favCharacters = response.data.characters;\r\n          setFavorites(favCharacters);\r\n        } else {\r\n          console.log(\"no response coming from backend\");\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  //console.log(favorites);\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <>\r\n          <h1>Loading page...</h1>\r\n          {/*//! A remplacer par des placeholders vides */}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <section className=\"wrapper section-container\">\r\n            <div className=\"section-title\">\r\n              <div className=\"section-line\"></div>\r\n              <h2 className=\"section-text\">CHARACTERS</h2>\r\n              <div className=\"section-line\"></div>\r\n            </div>\r\n            <div className=\"section-cards\">\r\n              {data.map((character) => (\r\n                <CardCharacters\r\n                  key={character._id}\r\n                  character={character}\r\n                  authToken={authToken}\r\n                  favorites={favorites}\r\n                ></CardCharacters>\r\n              ))}\r\n            </div>\r\n            <div>\r\n              <ReactPaginate\r\n                previousLabel={\"Previous\"}\r\n                nextLabel={\"Next\"}\r\n                breakLabel={\"...\"}\r\n                pageCount={count}\r\n                marginPagesDisplayed={2}\r\n                pageRangeDisplayed={5}\r\n                onPageChange={(e) => handleSkip(e, limit)}\r\n                breakClassName={\"break-me\"}\r\n                containerClassName={\"pagination\"}\r\n                nextLinkClassName={\"next-page\"}\r\n                previousLinkClassName={\"prev-page\"}\r\n                pageClassName={\"pages\"}\r\n                activeClassName={\"activePage\"}\r\n              />\r\n            </div>\r\n          </section>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\Header.js",["55"],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\App.js",["56"],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Comics.js",["57"],"import React, { useState, useEffect } from \"react\";\r\nimport CardComics from \"../components/CardComics\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport axios from \"axios\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport qs from \"qs\";\r\n\r\nconst Comics = (props) => {\r\n  const { search, skip, handleSkip, authToken } = props;\r\n  const [data, setData] = useState([]);\r\n  const [count, setCount] = useState(1);\r\n  const [limit, setLimit] = useState(100);\r\n  const [debouncedSearch] = useDebounce(search, 800);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [totalComics, setTotalComics] = useState(0);\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let params = {};\r\n        if (debouncedSearch) {\r\n          params = {\r\n            apiKey: process.env.REACT_APP_MARVEL_API_PUBLIC_KEY,\r\n            title: debouncedSearch,\r\n          };\r\n        } else {\r\n          params = {\r\n            apiKey: process.env.REACT_APP_MARVEL_API_PUBLIC_KEY,\r\n            limit: limit,\r\n            skip: skip,\r\n          };\r\n        }\r\n\r\n        const queryParams = qs.stringify(params);\r\n\r\n        const response = await axios.get(\r\n          `https://lereacteur-marvel-api.herokuapp.com/comics?${queryParams}`\r\n        );\r\n        setData(response.data.results);\r\n        setLimit(response.data.limit);\r\n        setTotalComics(response.data.count);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [debouncedSearch, limit, skip]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const newCount = Math.ceil(totalComics / limit);\r\n      setCount(newCount);\r\n    };\r\n\r\n    fetchData();\r\n  }, [data, limit, count, totalComics, isLoading]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (authToken) {\r\n        const response = await axios.get(\r\n          \"https://marvel-hysteria9.herokuapp.com/favorites\",\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + authToken,\r\n            },\r\n          }\r\n        );\r\n        if (response.data) {\r\n          const favComics = response.data.comics;\r\n          setFavorites(favComics);\r\n        } else {\r\n          console.log(\"no response coming from backend\");\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  //console.log(data, limit, skip, count, debouncedSearch);\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <>\r\n          <h1>Loading page...</h1>\r\n          {/*//! A remplacer par des placeholders vides */}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <section className=\"wrapper section-container\">\r\n            <div className=\"section-title\">\r\n              <div className=\"section-line\"></div>\r\n              <h2 className=\"section-text\">COMICS</h2>\r\n              <div className=\"section-line\"></div>\r\n            </div>\r\n            <div className=\"section-cards\">\r\n              {data.map((comic) => (\r\n                <CardComics\r\n                  key={comic._id}\r\n                  authToken={authToken}\r\n                  comic={comic}\r\n                  favorites={favorites}\r\n                  className=\"card-container\"\r\n                ></CardComics>\r\n              ))}\r\n            </div>\r\n            <div>\r\n              <ReactPaginate\r\n                previousLabel={\"Previous\"}\r\n                nextLabel={\"Next\"}\r\n                breakLabel={\"...\"}\r\n                pageCount={count}\r\n                marginPagesDisplayed={2}\r\n                pageRangeDisplayed={5}\r\n                onPageChange={(e) => handleSkip(e, limit)}\r\n                breakClassName={\"break-me\"}\r\n                containerClassName={\"pagination\"}\r\n                nextLinkClassName={\"next-page\"}\r\n                previousLinkClassName={\"prev-page\"}\r\n                pageClassName={\"pages\"}\r\n                activeClassName={\"activePage\"}\r\n              />\r\n            </div>\r\n          </section>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comics;\r\n",["58","59"],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\CardCharacters.js",[],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\CardComics.js",[],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Character.js",["60"],"import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { faStar as emptyStar } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faStar as solidStar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport CardComics from \"../components/CardComics\";\r\n\r\nconst Character = (props) => {\r\n  const { authToken } = props;\r\n\r\n  const search = useLocation().search;\r\n  const name = new URLSearchParams(search).get(\"name\");\r\n  const id = new URLSearchParams(search).get(\"id\");\r\n\r\n  const [data, setData] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isCharacterFavorite, setIsCharacterFavorite] = useState(false);\r\n  const [favoritesComics, setFavoritesComics] = useState([]);\r\n\r\n  const handleFavoriteCharacter = async () => {\r\n    try {\r\n      const selectedCharacter = {\r\n        _id: id,\r\n        name: name,\r\n      };\r\n      //console.log(selectedCharacter);\r\n      const response = await axios.post(\r\n        \"https://marvel-hysteria9.herokuapp.com/favorites/characters\",\r\n        selectedCharacter,\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + authToken,\r\n          },\r\n        }\r\n      );\r\n      if (response.data) {\r\n        const fav = response.data.isFavorite;\r\n        setIsCharacterFavorite(fav);\r\n      } else {\r\n        console.log(\"no response coming from backend\");\r\n      }\r\n    } catch (error) {\r\n      if (error.response.status === 500) {\r\n        console.error(\"An error occurred\");\r\n      } else {\r\n        console.error(error.response.data.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const apiKey = process.env.REACT_APP_MARVEL_API_PUBLIC_KEY;\r\n\r\n        const response = await axios.get(\r\n          `https://lereacteur-marvel-api.herokuapp.com/comics/${id}?apiKey=${apiKey}`\r\n        );\r\n        setData(response.data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const checkCharacterFavorite = (favorites) => {\r\n      let isFav = false;\r\n      favorites.map((favorite) => {\r\n        if (id === favorite._id) {\r\n          isFav = true;\r\n        }\r\n        return isFav;\r\n      });\r\n      setIsCharacterFavorite(isFav);\r\n    };\r\n\r\n    const fetchData = async () => {\r\n      if (authToken) {\r\n        const response = await axios.get(\r\n          \"https://marvel-hysteria9.herokuapp.com/favorites\",\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + authToken,\r\n            },\r\n          }\r\n        );\r\n        if (response.data) {\r\n          const favComics = response.data.comics;\r\n          setFavoritesComics(favComics);\r\n          const favCharatacters = response.data.characters;\r\n          checkCharacterFavorite(favCharatacters);\r\n        } else {\r\n          console.log(\"no response coming from backend\");\r\n        }\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <>\r\n          <h1>Loading page...</h1>\r\n          {/*//! A remplacer par des placeholders vides */}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <section className=\"wrapper section-container\">\r\n            <div className=\"section-title\">\r\n              <div className=\"section-line\"></div>\r\n              <h2 className=\"section-text\">{data.name}</h2>\r\n              <div className=\"section-line\"></div>\r\n            </div>\r\n            <div className=\"section-portrait-container\">\r\n              <div className=\"portrait-container\">\r\n                <img\r\n                  className=\"portrait-image\"\r\n                  src={`${data.thumbnail.path}/portrait_uncanny.${data.thumbnail.extension}`}\r\n                  alt={data.name}\r\n                />\r\n                {authToken && (\r\n                  <div\r\n                    className=\"favorite-btn-container btn\"\r\n                    onClick={handleFavoriteCharacter}\r\n                  >\r\n                    <p>Add to favorites</p>\r\n                    {isCharacterFavorite ? (\r\n                      <FontAwesomeIcon\r\n                        icon={solidStar}\r\n                        size=\"1x\"\r\n                        className=\"fav-logo\"\r\n                      ></FontAwesomeIcon>\r\n                    ) : (\r\n                      <FontAwesomeIcon\r\n                        icon={emptyStar}\r\n                        size=\"1x\"\r\n                        className=\"fav-logo\"\r\n                      ></FontAwesomeIcon>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"portrait-comics\">\r\n                {data.description && (\r\n                  <div className=\"portrait-section\">\r\n                    <h4>Description</h4>\r\n                    <p>{data.description}</p>\r\n                  </div>\r\n                )}\r\n                <div className=\"portrait-section\">\r\n                  <h4>\r\n                    Comics appearances{\" \"}\r\n                    <span>(Results : {data.comics.length})</span>\r\n                  </h4>\r\n                </div>\r\n                <div className=\"portrait-comics-cards\">\r\n                  {data.comics.map((comic) => (\r\n                    <CardComics\r\n                      key={comic._id}\r\n                      comic={comic}\r\n                      className=\"portrait-card-container\"\r\n                      authToken={authToken}\r\n                      favorites={favoritesComics}\r\n                    ></CardComics>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\AuthModal.js",[],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\containers\\Favorites.js",[],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\index.js",[],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\Footer.js",[],"D:\\antho\\Documents\\Programmation\\LeReacteur\\React\\Test Technique\\marvel-frontend\\src\\components\\Page404.js",[],{"ruleId":"61","severity":1,"message":"62","line":80,"column":6,"nodeType":"63","endLine":80,"endColumn":8,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":88,"column":1,"nodeType":"67","messageId":"68","endLine":93,"endColumn":2},{"ruleId":"69","severity":1,"message":"70","line":2,"column":27,"nodeType":"71","messageId":"72","endLine":2,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":80,"column":6,"nodeType":"63","endLine":80,"endColumn":8,"suggestions":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"61","severity":1,"message":"78","line":105,"column":6,"nodeType":"63","endLine":105,"endColumn":8,"suggestions":"79"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authToken'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["81"],"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"React Hook useEffect has missing dependencies: 'authToken' and 'id'. Either include them or remove the dependency array.",["84"],{"desc":"85","fix":"86"},{"desc":"85","fix":"87"},"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [authToken]",{"range":"90","text":"91"},{"range":"92","text":"91"},"Update the dependencies array to be: [authToken, id]",{"range":"93","text":"94"},[2438,2440],"[authToken]",[2391,2393],[3127,3129],"[authToken, id]"]